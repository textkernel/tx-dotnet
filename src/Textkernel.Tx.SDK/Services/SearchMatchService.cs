// Copyright © 2023 Textkernel BV. All rights reserved.
// This file is provided for use by, or on behalf of, Textkernel licensees
// within the terms of their license of Textkernel products or Textkernel customers
// within the Terms of Service pertaining to the Textkernel SaaS products.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Textkernel.Tx.Models.API.BimetricScoring;
using Textkernel.Tx.Models.API.Indexes;
using Textkernel.Tx.Models.API.Matching.Request;
using Textkernel.Tx.Models.API.Matching;
using Textkernel.Tx.Models.Job;
using Textkernel.Tx.Models.Matching;
using Textkernel.Tx.Models.Resume;
using Textkernel.Tx.Models.API.Geocoding;
using Textkernel.Tx.Models;

namespace Textkernel.Tx.Services
{
    /// <summary>
    /// Use <see cref="TxClient.SearchMatchV1"/>
    /// </summary>
    internal class SearchMatchService : ServiceBase, ISearchMatchService
    {
        internal SearchMatchService(HttpClient httpClient, EnvironmentSettings settings)
            : base(httpClient, settings)
        {
        }

        #region Indexes

        /// <summary>
        /// Create a new index
        /// </summary>
        /// <param name="type">The type of documents stored in this index. Either 'Resume' or 'Job'</param>
        /// <param name="indexId">
        /// The ID to assign to the new index. This is restricted to alphanumeric with dashes 
        /// and underscores. All values will be converted to lower-case.
        /// </param>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<CreateIndexResponse> CreateIndex(IndexType type, string indexId)
        {
            CreateIndexRequest request = new CreateIndexRequest
            {
                IndexType = type
            };

            HttpRequestMessage apiRequest = ApiEndpoints.CreateIndex(indexId);
            apiRequest.AddJsonBody(request);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<CreateIndexResponse>(response, apiRequest);
        }

        /// <summary>
        /// Get all existing indexes
        /// </summary>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<GetAllIndexesResponse> GetAllIndexes()
        {
            HttpRequestMessage apiRequest = ApiEndpoints.GetAllIndexes();
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<GetAllIndexesResponse>(response, apiRequest);
        }

        /// <summary>
        /// Delete an existing index. Note that this is a destructive action and 
        /// cannot be undone. All the documents in this index will be deleted.
        /// </summary>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<DeleteIndexResponse> DeleteIndex(string indexId)
        {
            HttpRequestMessage apiRequest = ApiEndpoints.DeleteIndex(indexId);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<DeleteIndexResponse>(response, apiRequest);
        }

        #endregion

        #region Documents

        /// <summary>
        /// Add a resume to an existing index
        /// </summary>
        /// <param name="resume">A resume generated by the Resume Parser</param>
        /// <param name="indexId">The index the document should be added into (case-insensitive).</param>
        /// <param name="documentId">
        /// The ID to assign to the new document. This is restricted to alphanumeric 
        /// with dashes and underscores. All values will be converted to lower-case.
        /// </param>
        /// <param name="userDefinedTags">The user-defined tags that the resume should have</param>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<IndexDocumentResponse> IndexDocument(ParsedResume resume, string indexId, string documentId, IEnumerable<string> userDefinedTags = null)
        {
            IndexResumeRequest requestBody = new IndexResumeRequest
            {
                ResumeData = resume,
                UserDefinedTags = userDefinedTags?.ToList()
            };

            HttpRequestMessage apiRequest = ApiEndpoints.IndexResume(indexId, documentId);
            apiRequest.AddJsonBody(requestBody);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<IndexDocumentResponse>(response, apiRequest);
        }

        /// <summary>
        /// Add a job to an existing index
        /// </summary>
        /// <param name="job">A job generated by the Job Parser</param>
        /// <param name="indexId">The index the document should be added into (case-insensitive).</param>
        /// <param name="documentId">
        /// The ID to assign to the new document. This is restricted to alphanumeric 
        /// with dashes and underscores. All values will be converted to lower-case.
        /// </param>
        /// <param name="userDefinedTags">The user-defined tags that the job should have</param>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<IndexDocumentResponse> IndexDocument(ParsedJob job, string indexId, string documentId, IEnumerable<string> userDefinedTags = null)
        {
            IndexJobRequest requestBody = new IndexJobRequest
            {
                JobData = job,
                UserDefinedTags = userDefinedTags?.ToList()
            };

            HttpRequestMessage apiRequest = ApiEndpoints.IndexJob(indexId, documentId);
            apiRequest.AddJsonBody(requestBody);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<IndexDocumentResponse>(response, apiRequest);
        }

        /// <summary>
        /// Add several resumes to an existing index
        /// </summary>
        /// <param name="resumes">The resumes generated by the Resume Parser paired with their DocumentIds</param>
        /// <param name="indexId">The index the resumes should be added into (case-insensitive).</param>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<IndexMultipleDocumentsResponse> IndexMultipleDocuments(IEnumerable<IndexResumeInfo> resumes, string indexId)
        {
            IndexMultipleResumesRequest requestBody = new IndexMultipleResumesRequest
            {
                Resumes = resumes?.ToList()
            };

            HttpRequestMessage apiRequest = ApiEndpoints.IndexMultipleResumes(indexId);
            apiRequest.AddJsonBody(requestBody);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<IndexMultipleDocumentsResponse>(response, apiRequest);
        }

        /// <summary>
        /// Add several jobs to an existing index
        /// </summary>
        /// <param name="jobs">The jobs generated by the Job Parser paired with their DocumentIds</param>
        /// <param name="indexId">The index the jobs should be added into (case-insensitive).</param>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<IndexMultipleDocumentsResponse> IndexMultipleDocuments(IEnumerable<IndexJobInfo> jobs, string indexId)
        {
            IndexMultipleJobsRequest requestBody = new IndexMultipleJobsRequest
            {
                Jobs = jobs?.ToList()
            };

            HttpRequestMessage apiRequest = ApiEndpoints.IndexMultipleJobs(indexId);
            apiRequest.AddJsonBody(requestBody);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<IndexMultipleDocumentsResponse>(response, apiRequest);
        }

        /// <summary>
        /// Delete an existing document from an index
        /// </summary>
        /// <param name="indexId">The index containing the document</param>
        /// <param name="documentId">The ID of the document to delete</param>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<DeleteDocumentResponse> DeleteDocument(string indexId, string documentId)
        {
            HttpRequestMessage apiRequest = ApiEndpoints.DeleteDocument(indexId, documentId);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<DeleteDocumentResponse>(response, apiRequest);
        }

        /// <summary>
        /// Delete a group of existing documents from an index
        /// </summary>
        /// <param name="indexId">The index containing the documents</param>
        /// <param name="documentIds">The IDs of the documents to delete</param>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<DeleteMultipleDocumentsResponse> DeleteMultipleDocuments(string indexId, IEnumerable<string> documentIds)
        {
            HttpRequestMessage apiRequest = ApiEndpoints.DeleteMultipleDocuments(indexId);
            apiRequest.AddJsonBody(new { DocumentIds = documentIds?.ToList() });
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<DeleteMultipleDocumentsResponse>(response, apiRequest);
        }

        /// <summary>
        /// Retrieve an existing resume from an index
        /// </summary>
        /// <param name="indexId">The index containing the resume</param>
        /// <param name="documentId">The ID of the resume to retrieve</param>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<GetResumeResponse> GetResume(string indexId, string documentId)
        {
            HttpRequestMessage apiRequest = ApiEndpoints.GetResume(indexId, documentId);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<GetResumeResponse>(response, apiRequest);
        }

        /// <summary>
        /// Retrieve an existing job from an index
        /// </summary>
        /// <param name="indexId">The index containing the job</param>
        /// <param name="documentId">The ID of the job to retrieve</param>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<GetJobResponse> GetJob(string indexId, string documentId)
        {
            HttpRequestMessage apiRequest = ApiEndpoints.GetJob(indexId, documentId);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<GetJobResponse>(response, apiRequest);
        }

        /// <summary>
        /// Updates the user-defined tags for a resume
        /// </summary>
        /// <param name="indexId">The index containing the resume</param>
        /// <param name="documentId">The ID of the resume to update</param>
        /// <param name="userDefinedTags">The user-defined tags to add/delete/etc</param>
        /// <param name="method">Which method to use for the specified user-defined tags</param>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<UpdateUserDefinedTagsResponse> UpdateResumeUserDefinedTags(
            string indexId,
            string documentId,
            IEnumerable<string> userDefinedTags,
            UserDefinedTagsMethod method)
        {
            UpdateUserDefinedTagsRequest requestBody = new UpdateUserDefinedTagsRequest
            {
                UserDefinedTags = userDefinedTags?.ToList(),
                Method = method
            };

            HttpRequestMessage apiRequest = ApiEndpoints.UpdateResumeUserDefinedTags(indexId, documentId);
            apiRequest.AddJsonBody(requestBody);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<UpdateUserDefinedTagsResponse>(response, apiRequest);
        }


        /// <summary>
        /// Updates the user-defined tags for a job
        /// </summary>
        /// <param name="indexId">The index containing the job</param>
        /// <param name="documentId">The ID of the job to update</param>
        /// <param name="userDefinedTags">The user-defined tags to add/delete/etc</param>
        /// <param name="method">Which method to use for the specified user-defined tags</param>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<UpdateUserDefinedTagsResponse> UpdateJobUserDefinedTags(
            string indexId,
            string documentId,
            IEnumerable<string> userDefinedTags,
            UserDefinedTagsMethod method)
        {
            UpdateUserDefinedTagsRequest requestBody = new UpdateUserDefinedTagsRequest
            {
                UserDefinedTags = userDefinedTags?.ToList(),
                Method = method
            };

            HttpRequestMessage apiRequest = ApiEndpoints.UpdateJobUserDefinedTags(indexId, documentId);
            apiRequest.AddJsonBody(requestBody);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<UpdateUserDefinedTagsResponse>(response, apiRequest);
        }

        #endregion

        #region Matching

        /// <summary>
        /// Find matches for a non-indexed resume.
        /// </summary>
        /// <param name="resume">The resume (generated by the Resume Parser) to use as the source for a match query</param>
        /// <param name="indexesToQuery">The indexes to find results in. These must all be of the same type (resumes or jobs)</param>
        /// <param name="preferredWeights">
        /// The preferred category weights for scoring the results. If none are provided,
        /// The best values will be determined based on the source resume
        /// </param>
        /// <param name="filters">Any filters to apply prior to the match (a result must satisfy all the filters)</param>
        /// <param name="settings">Settings for this match</param>
        /// <param name="numResults">The number of results to show. If not specified, the default will be used.</param>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<MatchResponse> Match(
            ParsedResume resume,
            IEnumerable<string> indexesToQuery,
            CategoryWeights preferredWeights = null,
            FilterCriteria filters = null,
            SearchMatchSettings settings = null,
            int numResults = 0)
        {
            MatchResumeRequest requestBody = CreateRequest(resume, indexesToQuery, preferredWeights, filters, settings, numResults);

            HttpRequestMessage apiRequest = ApiEndpoints.MatchResume();
            apiRequest.AddJsonBody(requestBody);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<MatchResponse>(response, apiRequest);
        }

        internal MatchResumeRequest CreateRequest(
            ParsedResume resume,
            IEnumerable<string> indexesToQuery,
            CategoryWeights preferredWeights,
            FilterCriteria filters,
            SearchMatchSettings settings,
            int numResults
            )
        {
            return new MatchResumeRequest()
            {
                ResumeData = resume,
                IndexIdsToSearchInto = indexesToQuery?.ToList(),
                PreferredCategoryWeights = preferredWeights,
                FilterCriteria = filters,
                Settings = settings,
                Take = numResults
            };
        }

        /// <summary>
        /// Find matches for a non-indexed job.
        /// </summary>
        /// <param name="job">The job (generated by the Job Parser) to use as the source for a match query</param>
        /// <param name="indexesToQuery">The indexes to find results in. These must all be of the same type (resumes or jobs)</param>
        /// <param name="preferredWeights">
        /// The preferred category weights for scoring the results. If none are provided,
        /// The best values will be determined based on the source job
        /// </param>
        /// <param name="filters">Any filters to apply prior to the match (a result must satisfy all the filters)</param>
        /// <param name="settings">Settings for this match</param>
        /// <param name="numResults">The number of results to show. If not specified, the default will be used.</param>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<MatchResponse> Match(
            ParsedJob job,
            IEnumerable<string> indexesToQuery,
            CategoryWeights preferredWeights = null,
            FilterCriteria filters = null,
            SearchMatchSettings settings = null,
            int numResults = 0)
        {
            MatchJobRequest requestBody = CreateRequest(job, indexesToQuery, preferredWeights, filters, settings, numResults);

            HttpRequestMessage apiRequest = ApiEndpoints.MatchJob();
            apiRequest.AddJsonBody(requestBody);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<MatchResponse>(response, apiRequest);
        }

        internal MatchJobRequest CreateRequest(
            ParsedJob job,
            IEnumerable<string> indexesToQuery,
            CategoryWeights preferredWeights,
            FilterCriteria filters,
            SearchMatchSettings settings,
            int numResults)
        {
            return new MatchJobRequest()
            {
                JobData = job,
                IndexIdsToSearchInto = indexesToQuery?.ToList(),
                PreferredCategoryWeights = preferredWeights,
                FilterCriteria = filters,
                Settings = settings,
                Take = numResults
            };
        }

        /// <summary>
        /// Find matches for a resume or job that is already indexed
        /// </summary>
        /// <param name="indexId">The index containing the document you want to match</param>
        /// <param name="documentId">The ID of the document to match</param>
        /// <param name="indexesToQuery">The indexes to find results in. These must all be of the same type (resumes or jobs)</param>
        /// <param name="preferredWeights">
        /// The preferred category weights for scoring the results. If none are provided,
        /// The best values will be determined based on the source resume/job
        /// </param>
        /// <param name="filters">Any filters to apply prior to the match (a result must satisfy all the filters)</param>
        /// <param name="settings">Settings for this match</param>
        /// <param name="numResults">The number of results to show. If not specified, the default will be used.</param>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<MatchResponse> Match(
            string indexId,
            string documentId,
            IEnumerable<string> indexesToQuery,
            CategoryWeights preferredWeights = null,
            FilterCriteria filters = null,
            SearchMatchSettings settings = null,
            int numResults = 0)
        {
            MatchByDocumentIdOptions requestBody = CreateRequest(indexesToQuery, preferredWeights, filters, settings, numResults);

            HttpRequestMessage apiRequest = ApiEndpoints.MatchByDocumentId(indexId, documentId);
            apiRequest.AddJsonBody(requestBody);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<MatchResponse>(response, apiRequest);
        }

        internal MatchByDocumentIdOptions CreateRequest(
            IEnumerable<string> indexesToQuery,
            CategoryWeights preferredWeights,
            FilterCriteria filters,
            SearchMatchSettings settings,
            int numResults)
        {
            return new MatchByDocumentIdOptions()
            {
                IndexIdsToSearchInto = indexesToQuery?.ToList(),
                PreferredCategoryWeights = preferredWeights,
                FilterCriteria = filters,
                Settings = settings,
                Take = numResults
            };
        }

        #endregion

        #region Searching

        /// <summary>
        /// Search for resumes or jobs that meet specific criteria
        /// </summary>
        /// <param name="indexesToQuery">The indexes to find results in. These must all be of the same type (resumes or jobs)</param>
        /// <param name="query">The search query. A result must satisfy all of these criteria</param>
        /// <param name="settings">The settings for this search request</param>
        /// <param name="pagination">Pagination settings. If not specified the default will be used</param>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<SearchResponse> Search(
            IEnumerable<string> indexesToQuery,
            FilterCriteria query,
            SearchMatchSettings settings = null,
            PaginationSettings pagination = null)
        {
            SearchRequest requestBody = CreateRequest(indexesToQuery, query, settings, pagination);

            HttpRequestMessage apiRequest = ApiEndpoints.Search();
            apiRequest.AddJsonBody(requestBody);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<SearchResponse>(response, apiRequest);
        }

        internal SearchRequest CreateRequest(
            IEnumerable<string> indexesToQuery,
            FilterCriteria query,
            SearchMatchSettings settings,
            PaginationSettings pagination)
        {
            return new SearchRequest()
            {
                IndexIdsToSearchInto = indexesToQuery?.ToList(),
                FilterCriteria = query,
                Settings = settings,
                PaginationSettings = pagination
            };
        }

        #endregion

        #region Bimetric Scoring

        /// <summary>
        /// Score one or more target documents against a source resume
        /// </summary>
        /// <param name="sourceResume">The source resume</param>
        /// <param name="targetDocuments">The target resumes/jobs</param>
        /// <param name="preferredWeights">
        /// The preferred category weights for scoring the results. If none are provided,
        /// The best values will be determined based on the source resume
        /// </param>
        /// <param name="settings">Settings to be used for this scoring request</param>
        /// <typeparam name="TTarget">Either <see cref="ParsedResumeWithId"/> or <see cref="ParsedJobWithId"/></typeparam>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<BimetricScoreResponse> BimetricScore<TTarget>(
            ParsedResumeWithId sourceResume,
            List<TTarget> targetDocuments,
            CategoryWeights preferredWeights = null,
            SearchMatchSettings settings = null) where TTarget : IParsedDocWithId
        {
            BimetricScoreResumeRequest requestBody = CreateRequest(sourceResume, targetDocuments, preferredWeights, settings);

            HttpRequestMessage apiRequest = ApiEndpoints.BimetricScoreResume();
            apiRequest.AddJsonBody(requestBody);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<BimetricScoreResponse>(response, apiRequest);
        }

        internal BimetricScoreResumeRequest CreateRequest<TTarget>(
            ParsedResumeWithId sourceResume,
            List<TTarget> targetDocuments,
            CategoryWeights preferredWeights,
            SearchMatchSettings settings) where TTarget : IParsedDocWithId
        {
            return new BimetricScoreResumeRequest()
            {
                PreferredCategoryWeights = preferredWeights,
                Settings = settings,
                SourceResume = sourceResume,
                TargetResumes = targetDocuments as List<ParsedResumeWithId>,
                TargetJobs = targetDocuments as List<ParsedJobWithId>
            };
        }

        /// <summary>
        /// Score one or more target documents against a source job
        /// </summary>
        /// <param name="sourceJob">The source job</param>
        /// <param name="targetDocuments">The target resumes/jobs</param>
        /// <param name="preferredWeights">
        /// The preferred category weights for scoring the results. If none are provided,
        /// The best values will be determined based on the source job
        /// </param>
        /// <param name="settings">Settings to be used for this scoring request</param>
        /// <typeparam name="TTarget">Either <see cref="ParsedResumeWithId"/> or <see cref="ParsedJobWithId"/></typeparam>
        /// <exception cref="TxException">Thrown when an API error occurs</exception>
        public async Task<BimetricScoreResponse> BimetricScore<TTarget>(
            ParsedJobWithId sourceJob,
            List<TTarget> targetDocuments,
            CategoryWeights preferredWeights = null,
            SearchMatchSettings settings = null) where TTarget : IParsedDocWithId
        {
            BimetricScoreJobRequest requestBody = CreateRequest(sourceJob, targetDocuments, preferredWeights, settings);

            HttpRequestMessage apiRequest = ApiEndpoints.BimetricScoreJob();
            apiRequest.AddJsonBody(requestBody);
            HttpResponseMessage response = await _httpClient.SendAsync(apiRequest);
            return await ProcessResponse<BimetricScoreResponse>(response, apiRequest);
        }

        internal BimetricScoreJobRequest CreateRequest<TTarget>(
            ParsedJobWithId sourceJob,
            List<TTarget> targetDocuments,
            CategoryWeights preferredWeights,
            SearchMatchSettings settings) where TTarget : IParsedDocWithId
        {
            return new BimetricScoreJobRequest()
            {
                PreferredCategoryWeights = preferredWeights,
                Settings = settings,
                SourceJob = sourceJob,
                TargetResumes = targetDocuments as List<ParsedResumeWithId>,
                TargetJobs = targetDocuments as List<ParsedJobWithId>
            };
        }

        #endregion

        

    }
}
